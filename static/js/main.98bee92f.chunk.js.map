{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","listener","state","isScrolled","nav","React","createRef","this","document","addEventListener","e","scrollingElement","scrollTop","current","clientHeight","setState","removeEventListener","className","ref","style","backgroundColor","color","href","Component","App","loading","demoAsyncCall","then","Promise","resolve","setTimeout","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qPAsDeA,G,kBAnDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,SAAW,KAChB,EAAKC,MAAQ,CACTC,YAAY,GAEhB,EAAKC,IAAMC,IAAMC,YANF,E,iFASE,IAAD,OAChBC,KAAKN,SAAWO,SAASC,iBAAiB,UAAU,SAAAC,GACjCF,SAASG,iBAAiBC,WACzB,EAAKR,IAAIS,QAAQC,aACxB,EAAKZ,MAAMC,YACZ,EAAKY,SAAS,CAAEZ,YAAY,IAG5B,EAAKD,MAAMC,YACX,EAAKY,SAAS,CAAEZ,YAAY,S,2CAOxCK,SAASQ,oBAAoB,SAAUT,KAAKN,Y,+BAI5C,OACI,yBAAKgB,UAAU,SAASC,IAAKX,KAAKH,IAAKe,MAAO,CAC1CC,gBAAiBb,KAAKL,MAAMC,WAAa,iBAAmB,cAC5DkB,OAAOd,KAAKL,MAAMC,WAAa,WAE/B,yBAAKc,UAAU,QACX,qDAEJ,yBAAKA,UAAU,SACX,uBAAGK,KAAK,IAAR,YACA,uBAAGA,KAAK,IAAR,aACA,uBAAGA,KAAK,IAAR,iBACA,uBAAGA,KAAK,IAAR,UACA,4C,GA3CCC,cCsDNC,E,2MAnDbtB,MAAQ,CACNuB,SAAS,G,mFAGU,IAAD,OAElBlB,KAAKmB,gBAAgBC,MAAK,kBAAM,EAAKZ,SAAS,CAAEU,SAAS,S,sCAIzD,OAAO,IAAIG,SAAQ,SAACC,GAAD,OAAaC,YAAW,kBAAMD,MAAW,U,+BAO5D,OAFoBtB,KAAKL,MAAjBuB,QAGC,KAIP,6BACE,kBAAC,EAAD,MACA,yBAAKR,UAAU,UACb,yBAAKA,UAAU,SAAf,yBAA6C,0BAAME,MAAO,CAACY,WAAY,SAA1B,aAA7C,KACA,kEAEF,iDACA,iDACA,iDACA,iDAEA,iDACA,iDACA,iDACA,iDACA,iDAEA,iDACA,iDACA,iDACA,iDACA,iDAEA,sD,GA9CUR,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.98bee92f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.listener = null;\n        this.state = {\n            isScrolled: false,\n        };\n        this.nav = React.createRef();\n    }\n\n    componentDidMount() {\n        this.listener = document.addEventListener(\"scroll\", e => {\n            var scrolled = document.scrollingElement.scrollTop;\n            if (scrolled >= this.nav.current.clientHeight) {\n                if (!this.state.isScrolled) {\n                    this.setState({ isScrolled: true });\n                }\n            } else {\n                if (this.state.isScrolled) {\n                    this.setState({ isScrolled: false });\n                }\n            }\n        });\n    }\n\n    componentDidUpdate() {\n        document.removeEventListener(\"scroll\", this.listener);\n    }\n\n    render() {\n        return (\n            <div className=\"navBar\" ref={this.nav} style={{\n                backgroundColor: this.state.isScrolled ? \"rgb(14, 9, 15)\" : \"transparent\",\n                color: this.state.isScrolled ? \"white\" : \"white\",\n            }}>\n                <div className=\"logo\">\n                    <div >We've got your back</div>\n                </div>\n                <div className=\"links\">\n                    <a href=\"\">A propos</a>\n                    <a href=\"\">Formation</a>\n                    <a href=\"\">Expérience</a>\n                    <a href=\"\">Projet</a>\n                    <button>CV</button>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/Navbar';\n\nclass App extends Component {\n  state = {\n    loading: true\n  };\n\n  componentDidMount() {\n    // this simulates an async action, after which the component will render the content\n    this.demoAsyncCall().then(() => this.setState({ loading: false }));\n  }\n\n  demoAsyncCall() {\n    return new Promise((resolve) => setTimeout(() => resolve(), 2000));\n  }\n\n  render() {\n\n    const { loading } = this.state;\n    \n    if(loading) { // if your component doesn't have to wait for an async action, remove this block \n      return null; // render null when app is not ready\n    }\n\n    return (\n      <div>\n        <NavBar />\n        <div className=\"header\">\n          <div className=\"title\">Bonjour, je m'appelle <span style={{fontWeight: \"bold\"}}>Océane</span>.</div>\n          <p>Etudiante en software engineering.</p>\n        </div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n        <div>Blablallbalballb</div>\n\n        <div>Blablallbalballb</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}